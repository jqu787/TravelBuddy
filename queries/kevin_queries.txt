# Get businesses with >x stars
SELECT business_id, name, stars
FROM Business 
WHERE stars > input.stars
ORDER BY stars DESC;

# Get open businesses on a day of the week
SELECT business_id
FROM Business B JOIN Hours H ON B.business_id = H.business_id
WHERE business_id IN
(SELECT business_id
FROM Hours
WHERE week_day = input.week_day);

# Get a suggestion of restaurant to eat at with activities to do based on user location and distance threshold in km
WITH OpenBusinesses AS
(SELECT business_id
FROM Business B JOIN Hours H ON B.business_id = H.business_id
WHERE business_id IN
(SELECT business_id
FROM Hours
WHERE week_day = input.week_day)),
WithinDistanceBusiness AS
(SELECT business_id, name, L.latitude, L.longitude
FROM OpenBusinesses O JOIN Location L ON O.business_id = L.business_id
WHERE ACOS(SIN(input.lat) * SIN(latitude) + COS(input.lat) * COS(latitude) * COS(longitude - input.lon)) * 6371 < input.distance),
WithinDistanceAttraction1 AS
(SELECT name, X, Y, W.name
FROM Attraction A, WithinDistanceBusiness W
WHERE ACOS(SIN(latitude) * SIN(X) + COS(latitude) * COS(X) * COS(longitude - Y)) * 6371 < input.distance_from_prev),
WithinDistanceAttraction2 AS
(SELECT A.name, A.X, A.Y, W1.name, W.name
FROM Attraction A, WithinDistanceAttraction1 W1
WHERE ACOS(SIN(A.X) * SIN(W1.X) + COS(A.X) * COS(W1.X) * COS(A.Y - W1.Y)) * 6371 < input.distance_from_prev),
WithinDistanceAttraction3 AS
(SELECT A.name, A.X, A.Y, W2.name, W1.name, W.name
FROM Attraction A, WithinDistanceAttraction2 W2
WHERE ACOS(SIN(A.X) * SIN(W2.X) + COS(A.X) * COS(W2.X) * COS(A.Y - W2.Y)) * 6371 < input.distance_from_prev),
SELECT W.name, W1.name, W2.name, W3.name
FROM WithinDistanceAttraction3 W3;
